name: Images
run-name: "Building images ðŸš€"
on: workflow_dispatch

jobs:          
  build-job:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { model: "tuf-ax3000", sdk: "src-rt-5.02axhnd.675x", ui: "tuf", skip: false }
          - { model: "tuf-ax5400", sdk: "src-rt-5.02axhnd.675x", ui: "tuf", skip: false }
          
    if: "!contains(github.event.commits[0].message, '[SKIP_CI]')"
    container:
      image: gnuton/asuswrt-merlin-toolchains-docker:latest
      env:
        MERLINUPDATE: "y"
        MODEL: ${{ matrix.cfg.model }}
        SDK: ${{ matrix.cfg.sdk }}
        UI: ${{ matrix.cfg.ui }}
        SKIP_BUILD: ${{ matrix.cfg.skip }}
        GIT_REPO: "https://github.com/alfky12/asuswrt-merlin.ng.git"
        PROJECT_DIR: "/project/asuswrt-merlin.ng"
        ARTIFACTS_DIR: "/project/artifacts"
        CHANGELOG_FILE: "/tmp/CHANGELOG"
        PROJECTBASEDIR: "/project"
      options: --user docker 
      volumes:
        - /mnt:/project
    steps:
      - name: Run debug commands - post
        run: |
          cd /
          echo "--- Disk available ----"
          df -h
      - name: Fix permissions in docker image
        if: matrix.cfg.skip == false
        run: |
          sudo chown -R docker:docker /github/home /home/docker /project
      - name: "Fetch code"
        if: matrix.cfg.skip == false
        run: |
          cd /project
          if [[ $GITHUB_REF_TYPE == "tag" ]]; then
              export TAG="${GITHUB_REF#refs/tags/}"
              echo "Fetching code from tag $TAG"
          else
              export BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
              echo "Fetching code from branch $BRANCH"
          fi

          if git clone --depth 1 --branch "${TAG:-$BRANCH}" "$GIT_REPO"; then
              echo "Code fetched successfully."
          else
              echo "Failed to fetch code. Check the repository and settings."
              exit 1
          fi

          ls /home/docker
      - name: "Set version"
        if: matrix.cfg.skip == false
        run: |
          cd ${PROJECT_DIR}
          export CIRCLE_TAG="${GITHUB_REF#refs/*/}"
          if [[ $GITHUB_REF_TYPE == "branch" ]]; then
            echo "Nothing to do. Not a release. Branch detected: ${CIRCLE_TAG}"
          else
              TAG=$(echo ${CIRCLE_TAG} | sed 's/^[^.]*\.//')
              MAJOR_VER=$(echo "${TAG}" | sed -E 's/([0-9.]*)[_-]?(.*)/\1/')
              MINOR_VER=$(echo "${TAG}" | sed -E 's/([0-9.]*)[_-]?(.*)/\2/')
              sed -i "s/SERIALNO=.*/SERIALNO=${MAJOR_VER}/g" release/src-rt/version.conf
              sed -i "s/EXTENDNO=.*/EXTENDNO=${MINOR_VER}/g" release/src-rt/version.conf
              echo "Release detected. Updating version.conf with MAJOR_VER=${MAJOR_VER} and MINOR_VER=${MINOR_VER}"
          fi
      - name: Generate changelog
        if: matrix.cfg.skip == false
        run: |
          cd ${PROJECT_DIR}
          python tools/get-last-notes.py > "${CHANGELOG_FILE}"
          cat "${CHANGELOG_FILE}"
      - name: "Build"
        if: matrix.cfg.skip == false
        run: |
          echo "----- Space available -----"
          df -h
          echo "----- I am: $(id) -----"
          cd ${PROJECT_DIR}/release/${SDK}
          echo "----- Files in dir: $(pwd) -----"
          ls -alh
          echo "----- Setting toolchains for ${SDK} -----"
          if [[ ${SDK} == "src-rt-5.04axhnd.675x" ]]; then
            source /home/docker/envs/bcm-hnd-ax-4.19.sh
          elif [[ ${SDK} == "src-rt-5.02axhnd.675x" ]]; then
            source /home/docker/envs/bcm-hnd.sh
          elif [[ ${SDK} == "src-rt-5.02axhnd" ]]; then
            source /home/docker/envs/bcm-hnd.sh
          else
            echo "SDK not supported"
            exit -1
          fi
          echo "----- hack-ish fix ---------"
          sudo ln -sf /home/docker/am-toolchains/brcm-arm-hnd /opt/toolchains
          echo "----- Check envs dir ---------"

          ls -alh /home/docker/envs/
          echo "----- Debugging env vars -----"
          env
          echo "------ Setting UI as $UI ---------"
          if [[ ${UI} == "tuf" ]]; then
            echo "Enabling TUF UI"
            sed -i 's/TUF_UI=n/TUF_UI=y/' ${PROJECT_DIR}/release/src-rt/target.mak
          fi

          echo "----- BUILD ${MODEL}-----"
          make "${MODEL}"
      - name: "Prepare artifacts"
        if: matrix.cfg.skip == false
        run: |
          mkdir -p "${ARTIFACTS_DIR}"
          export IMAGE_PATH=${PROJECT_DIR}/release/${SDK}/image/
          echo "Removing images with boot loader."
          rm -rf ${IMAGE_PATH}/*cferom*

          files=("${IMAGE_PATH}"/*squashfs.pkgtb "${IMAGE_PATH}"/*.w)

          if [ ${#files[@]} -gt 0 ]; then
              for f in "${files[@]}"; do
                  if [ -f "$f" ] && [ "${f##*.}" != "md5" ]; then
                      echo "Creating MD5 signature for $f"
                      md5sum "$f" > "$f.md5"
                      echo "Copying image $f to workspace"
                      cp "$f" "${ARTIFACTS_DIR}"
                      cp "$f.md5" "${ARTIFACTS_DIR}"
                  fi
              done
          else
              echo "No *.squashfs.pkgtb or *.w files found in ${IMAGE_PATH}"
          fi

          # Changelogs are the same for each models since we are building from the same branch. We do use only the one generated by DSL-AX82U for now.
          if [[ ${MODEL} == "dsl-ax82u" ]]; then
            cp "${CHANGELOG_FILE}" "${ARTIFACTS_DIR}"
          fi
      - name: "Archive artifacts"
        if: matrix.cfg.skip == false
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.cfg.model }}-${{ matrix.cfg.ui }}
          path: "/project/artifacts"
        continue-on-error: true
